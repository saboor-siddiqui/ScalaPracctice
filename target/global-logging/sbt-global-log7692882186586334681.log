[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 132.8589ms
[debug]       Load.loadUnit: defsScala took 0.4464ms
[debug] [Loading] Scanning directory C:\Users\sabbi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sabbi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.7226 ms
[debug]           Load.resolveProject(global-plugins) took 52.871ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\sabbi\.sbt\1.0\plugins, plugins: List(<none>))) took 96.0999ms
[debug] [Loading] Done in C:\Users\sabbi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 124.774ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.236ms
[debug]     Load.loadUnit(file:/C:/Users/sabbi/.sbt/1.0/plugins/, ...) took 269.3114ms
[debug]   Load.apply: load took 535.2495ms
[debug]   Load.apply: resolveProjects took 5.9674ms
[debug]   Load.apply: finalTransforms took 52.3322ms
[debug]   Load.apply: config.delegates took 6.6777ms
[debug]   Load.apply: Def.make(settings)... took 356.2212ms
[debug]   Load.apply: structureIndex took 107.2101ms
[debug]   Load.apply: mkStreams took 1.841ms
[info] loading global plugins from C:\Users\sabbi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2268.4896ms
[debug]           Load.loadUnit: plugins took 25.2287ms
[debug]           Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\sabbi\Documents\ScalaPracctice\project
[debug]             Load.loadUnit: mkEval took 7.4946ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sabbi\Documents\ScalaPracctice\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.5067 ms
[info] loading settings for project scalapracctice-build from plugins.sbt ...
[debug]               Load.resolveProject(scalapracctice-build) took 2.8854ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalapracctice-build, base: C:\Users\sabbi\Documents\ScalaPracctice\project, plugins: List(<none>))) took 5.9368ms
[debug] [Loading] Done in C:\Users\sabbi\Documents\ScalaPracctice\project, returning: (scalapracctice-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 149.169ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4471ms
[debug]         Load.loadUnit(file:/C:/Users/sabbi/Documents/ScalaPracctice/project/, ...) took 179.9223ms
[debug]       Load.apply: load took 181.4669ms
[debug]       Load.apply: resolveProjects took 0.1666ms
[debug]       Load.apply: finalTransforms took 10.7636ms
[debug]       Load.apply: config.delegates took 0.4151ms
[debug]       Load.apply: Def.make(settings)... took 86.0854ms
[debug]       Load.apply: structureIndex took 22.3729ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from C:\Users\sabbi\Documents\ScalaPracctice\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 626.9145ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\sabbi\Documents\ScalaPracctice
[debug]       Load.loadUnit: mkEval took 0.2783ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sabbi\Documents\ScalaPracctice, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0091 ms
[info] loading settings for project scalapracctice from build.sbt ...
[debug]         Load.resolveProject(scalapracctice) took 1.874ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scalapracctice, base: C:\Users\sabbi\Documents\ScalaPracctice, plugins: List(<none>))) took 5.5414ms
[debug] [Loading] Done in C:\Users\sabbi\Documents\ScalaPracctice, returning: (scalapracctice)
[debug]     Load.loadUnit: loadedProjectsRaw took 2142.1955ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.9695ms
[debug]   Load.loadUnit(file:/C:/Users/sabbi/Documents/ScalaPracctice/, ...) took 2780.8249ms
[debug] Load.apply: load took 2782.5487ms
[debug] Load.apply: resolveProjects took 0.1168ms
[debug] Load.apply: finalTransforms took 11.7795ms
[debug] Load.apply: config.delegates took 0.4151ms
[debug] Load.apply: Def.make(settings)... took 72.3464ms
[debug] Load.apply: structureIndex took 23.6302ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to ScalaPracctice (in build file:/C:/Users/sabbi/Documents/ScalaPracctice/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * scalapracctice / idePackagePrefix
[warn]   +- C:\Users\sabbi\Documents\ScalaPracctice\build.sbt:7
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-fa2ff87ba7ba3245f48f
[debug] Writing bsp connection file
[info] started sbt server
